@model CIT_Web.Models.ViewModel.TaskCreateVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/js/bootstrap-multiselect.min.js"></script>
<script src="~/js/jquery.min.js"></script>

<script type="text/javascript">
    $('document').ready(function () {

        $("#btnAddTsk").click(function () {
            $('#myModal').show();
        })

        $("#btnAddTaskInRows").click(function () {
            debugger
            // var Valid = true;
            var Valid = Validation()
            if (Valid == true) {
                $('#add-save-btn').prop('disabled', true);
                $("#btnAddmoreTask").click();
            }

        })
        $("#CustomerId").change(function () {
            debugger
            var CustomerId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/Task/GetBranchNameById",
                data: { "CustomerId": CustomerId },
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var Branchlst = '<option value="">Select</option>';
                    for (var i = 0; i < data.length; i++) {
                        Branchlst += '<option value="' + data[i].branchID + '">' + data[i].branchName + '</option>';
                    }
                    $("#BranchID").html(Branchlst);
                }
            })
        })

        $("#CustomerRecipiantId").change(function () {
            debugger
            var CustomerId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/Task/GetBranchNameById",
                data: { "CustomerId": CustomerId },
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var Branchlst = '<option value="">Select</option>';
                    for (var i = 0; i < data.length; i++) {
                        Branchlst += '<option value="' + data[i].branchID + '">' + data[i].branchName + '</option>';
                    }
                    $("#CustomerRecipiantLocationId").html(Branchlst);
                }
            })
        })

        $("#choices-multiple-remove-button").change(function () {
            debugger
            var Days = $(this).val();
            $("#RepeatDaysName").val(Days);
        })
    });

    function Validation() {
        debugger
        var IsValid = true;
        var OrderTypeID = $("#orderType").val();
        var PriorityId = $("#priority").val();
        var OrderId = $("#OrderId").val();
        var PickUpTypeId = $("#PickUpType").val();
        var Createorderdate = $("#OrderCreateDate").val();
        var CustomerId = $("#CustomerId").val();
        var BranchID = $("#BranchID").val();
        var VaultId = $("#VaultID").val();

        var CustomerRecipiantId = $("#CustomerRecipiantId").val();
        var CustomerRecipiantLocationId = $("#CustomerRecipiantLocationId").val();

        var MyRadio_repeatTask = $('input[name=repeatTask]:checked').val();

        var isVault = $('#isVault').prop('checked');
        var isVaultFinal = $('#isVaultFinal').prop('checked');

        if (OrderTypeID == "0" || OrderTypeID == undefined) {
            $("#orderType").css("border", "1px solid red");
            IsValid = false;
        }
        if (PriorityId == "0" || PriorityId == undefined) {
            $("#priority").css("border", "1px solid red");
            IsValid = false;
        }
        // if (OrderId == "" || OrderId == undefined) {
        //     $("#OrderId").css("border", "1px solid red");
        //     IsValid = false;
        // }

        if (PickUpTypeId == "0" || PickUpTypeId == undefined) {
            $("#PickUpType").css("border", "1px solid red");
            IsValid = false;
        }
        if (Createorderdate == "" || Createorderdate == undefined) {
            $("#OrderCreateDate").css("border", "1px solid red");
            IsValid = false;
        }

        if (CustomerId == "0" || CustomerId == undefined) {
            $("#CustomerId").css("border", "1px solid red");
            IsValid = false;
        }
        if (BranchID == "0" || BranchID == null) {
            $("#BranchID").css("border", "1px solid red");
            IsValid = false;
        }

        if ((VaultId == "0" || VaultId == null) && isVault == true) {
            $("#VaultID").css("border", "1px solid red");
            IsValid = false;
        }

        if ((CustomerRecipiantId == "0" || CustomerRecipiantId == undefined) && isVaultFinal != true) {
            $("#CustomerRecipiantId").css("border", "1px solid red");
            IsValid = false;
        }
        if ((CustomerRecipiantLocationId == "0" || CustomerRecipiantLocationId == null) && isVaultFinal != true) {
            $("#CustomerRecipiantLocationId").css("border", "1px solid red");
            IsValid = false;
        }
        return IsValid;
    }
</script>
<form enctype="multipart/form-data" asp-controller="Task" ,asp-action="Index" method="post">
    <input asp-for="RepeatDaysName" type="hidden" />
    <div class="modal fade new-task-dashboard-data" id="myModal" aria-labelledby="myNewTaskModalLabel" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="padding: 10px;">
                    <h5 class="modal-title" id="myModalLabel">New Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div id="modal-content" class="modal-body">
                    <div id="orderMessage" style="display: none;">
                        <p style="background: #e29d1f; padding: 4px 10px; font-weight: 300; font-size: 13px; border-radius:4px;">  <i class="bi bi-info-circle-fill"></i> Multiple pickup and delivery task  can be liked by the same Order ID</p>
                    </div>

                    <div class="row align-items-center g-0">
                        <!-- OrderType Dropdown -->
                        <div class="col-md-4 col-sm-12">

                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-file-text-fill"></i></div>
                                <select asp-for="OrderTypeID" class="form-select small-input" id="orderType"
                                        asp-items="@(new SelectList(@Model.OrderTypelist,"OrderTypeID","TypeName"))">
                                </select>
                            </div>
                        </div>

                        <!-- Priority Dropdown -->
                        <div class="col-md-4 col-sm-12">
                            <div class="input-group">
                                <div class="input-group-text">Priority</div>
                                <select asp-for="PriorityId" class="form-select small-input" id="priority"
                                        asp-items="@(new SelectList(@Model.PriorityMasterlist,"PriorityId","PriorityName"))">
                                </select>
                            </div>
                        </div>

                        <!-- Order ID Input -->
                        <div class="col-md-4 col-sm-12">
                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-credit-card-2-front-fill"></i></div>
                                <input asp-for="OrderId" class="form-control small-input" placeholder="Enter Order Id" />
                                @* <input type="number" placeholder="Enter Order Id" class="form-control small-input" id="OrderId" name="OrderId" min="1" max="100"> *@
                            </div>
                        </div>
                    </div>

                    <div class="row align-items-center g-0">
                        <div class="col-md-6 col-sm-12 mb-2 mt-2">
                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-clipboard-fill"></i></div>
                                <select asp-for="PickUpTypeId" class="form-select small-input" id="PickUpType"
                                        asp-items="@(new SelectList(Model.Picktypemasterlst,"PickUpTypeId","PickUpTypeName"))">
                                </select>
                            </div>
                        </div>

                        <div class="col-md-6 col-sm-12">
                            <div class="input-group">
                                <input asp-for="OrderCreateDate" type="date" class="form-control small-input">
                            </div>
                        </div>
                    </div>

                    <div class="row align-items-center mt-3 ">
                        <h6>Sender / Pickup Location</h6>

                        <div class="row g-0 mx-auto">
                            <div class="col-md-6 col-sm-12">
                                <div class="input-group">
                                    <div class="input-group-text ms-3">
                                        <i class="bi bi-person-fill"></i> <!-- Replace with an appropriate icon for "Requester" -->
                                    </div>
                                    <select asp-for="CustomerId" class="form-select small-input"
                                            asp-items="@(new SelectList(Model.customerslist,"CustomerId","CustomerName"))">
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12 pe-3">
                                <div class="input-group ">
                                    <div class="input-group-text ">
                                        <i class="bi bi-geo-alt-fill"></i> <!-- Replace with an appropriate icon for "Location" -->
                                    </div>
                                    <select asp-for="BranchID" class="form-select small-input">
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row align-items-center mt-3">
                            <h6>Recipient / Destination Location</h6>
                            <div class="col-3">
                                <div class="form-check  ms-1">
                                    <input asp-for="isVault" type="checkbox" class="form-check-input">
                                    <label class="form-check-label" for="isVault">IsVault</label>
                                </div>
                            </div>
                            <div class="col-md-5 col-sm-12  " id="vaultLocationContainer">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <i class="bi bi-geo-alt-fill"></i> <!-- Replace with an appropriate icon for "Location" -->
                                    </div>
                                    @* <select asp-for="VaultID" class="form-select small-input"
                                    asp-items="@(new SelectList(Model.vaultLovationMasters,"VaultID","VaultName"))">
                                    </select> *@
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-check  ms-1" id="isVaultFinalContainer">
                                    <input asp-for="isVaultFinal" type="checkbox" class="form-check-input" name="isVaultFinal">
                                    <label class="form-check-label" for="isVaultFinal">isVault - final destination</label>
                                </div>
                            </div>
                            <div class="row g-0 mt-3 mb-3 ms-3 pe-2">
                                <!-- Recipient's Name Dropdown -->
                                <div class="col-md-6 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <i class="bi bi-person-fill"></i> <!-- Replace with an appropriate icon for "Recipient" -->
                                        </div>
                                        <select asp-for="CustomerRecipiantId" class="form-select small-input"
                                                asp-items="@(new SelectList(Model.customerslist,"CustomerId","CustomerName"))">
                                        </select>
                                    </div>
                                </div>

                                <!-- Delivery Location Dropdown -->
                                <div class="col-md-6 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <i class="bi bi-geo-fill"></i> <!-- Replace with an appropriate icon for "Delivery Location" -->
                                        </div>
                                        <select asp-for="CustomerRecipiantLocationId" class="form-select small-input">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <!-- Assign To Section -->
                            <div class="row  g-0 mt-3 mb-3 ms-3 pe-2">
                                <label class="mb-1">Assign To</label>
                                <div class="col-md-6 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <i class="bi bi-signpost-split"></i>
                                        </div>
                                        <select class="form-select small-input">
                                            <option value="" disabled selected>Select Route</option>
                                            <option value="1">Route 1</option>
                                            <option value="2">Route 2</option>
                                            <option value="3">Route 3</option>
                                            <option value="4">Route 4</option>
                                            <option value="5">Route 5</option>
                                        </select>
                                    </div>
                                </div>

                            </div>
                            <div class="mt-0">

                                <!-- Repeat This Task Toggle -->
                                <div class="form-check form-switch mb-2 fw-bold">
                                    <input class="form-check-input" type="checkbox" id="repeatTask" name="repeatTask">
                                    <label class="form-check-label" for="repeatTask">Repeat this task</label>
                                </div>

                                <!-- Repeats Section (Initially Hidden) -->
                                <div class="row align-items-center g-0 repeats-section" id="repeatsSection">
                                    <!-- Repeats Dropdown -->
                                    <div class="col-md-6 col-sm-12">
                                        <div class="input-group w-100">
                                            <div class="input-group-text">Repeats</div>
                                            <select asp-for="RepeatId" class="form-select small-input" id="repeatsMode"
                                                    asp-items="@(new SelectList(Model.repeatsaskmasterslist, "RepeatId", "RepeatName"))">
                                            </select>
                                        </div>
                                    </div>
                                    <!-- Ends On Calendar -->
                                    <div class="col-md-6 col-sm-12">
                                        <div class="input-group w-100">
                                            <div class="input-group-text">Ends on</div>
                                            <input asp-for="EndOnDate" type="date" class="form-control small-input" id="endsOn">
                                        </div>
                                    </div>
                                    <!-- Repeats On Multi-select Dropdown -->
                                    <div class="col-md-12 col-sm-12 mb-3">
                                        <div class="input-group w-100">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text repeats-on-text">Repeats On</span>
                                            </div>
                                            @* <select asp-for="RepeatDaysName" class="form-select small-input" multiple="multiple"
                                            asp-items="@(new SelectList(Model.repeatsInDaysMasterslist, "RepeatDaysName", "RepeatInDay"))">
                                            </select> *@
                                            <select id="choices-multiple-remove-button" class="form-select small-input" name="options" multiple>
                                                <option value="Sunday">Sunday</option>
                                                <option value="Monday">Monday</option>
                                                <option value="Tuesday">Tuesday</option>
                                                <option value="Wednesday">Wednesday</option>
                                                <option value="Thursday">Thursday</option>
                                                <option value="Friday">Friday</option>
                                                <option value="Saturday">Saturday</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>


                    <div class="modal-footer d-flex justify-content-between" style="font-size:12px !important; padding:0px !important">
                        <button type="button" style="font-size:12px !important;" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle-fill"></i> Close</button>
                        <div>


                            <input type="button" style="font-size:12px !important; color: #032b56; border-color: #032b56; bi bi-file-earmark-pdf !important;"
                                   class="btn btn-outline" value="Save & Add Another" id="btnsave">

                            <input type="submit" class="btn btn-color" id="btnAddmoreTask" style="display:none" />
                            @* <button type="button" style="font-size:12px !important;" class="btn btn-color" data-bs-dismiss="modal" id="btnAddTaskInRows" style="background:#132553 !important;"><i class="bi bi-file-earmark-pdf"></i> Save & Add more location to this Task</button> *@
                            <input type="button" style="font-size:12px !important;" class="btn btn-color" data-bs-dismiss="modal" value="Save and Close" id="btnAddTaskInRows" />
                            @* <i class="bi bi-file-earmark-lock-fill"></i> Save and close *@
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</form>

@* ************************************************************************************************************ *@


<div class="tab-container-task-header mt-3 ms-3" style="width: 100%;">
    <div class="group-data-action-container d-flex justify-content-between">
        <div class="d-flex align-items-center">
            <a class="ms-2 me-3" href="#"><i class="bi bi-person-check-fill"></i></a>
            <a class="me-3" href="#"><i class="bi bi-pencil-square"></i></a>
            <a class="me-3" href="#"><i class="bi bi-trash-fill"></i></a>
            <a class="me-3" href="#"><i class="bi bi-arrow-down-circle-fill"></i></a>
            <a class="me-3" href="#"><i class="bi bi-gear-fill"></i></a>
            <button class="btn btn-color group-button" data-bs-toggle="Groupmodal" data-bs-target="#groupModal" id="groupPopup">Task Grouping</button>
            <div class="dropdown-new-task  me-2 ms-3" style="width:91px !important">
                <button type="button" class="btn btn-outline-secondary btn-color" data-bs-toggle="modal" id="btnAddTsk" data-bs-target="#myNewTaskModal">
                    <i class="bi bi-plus"></i> New Task
                </button>
            </div>
        </div>
        <div class="d-flex" style="margin-right: 21px;">
            <div>
                <input type="date" id="filter-date" style="padding: 5px; margin-right: 10px;" />
            </div>
            <input type="text" placeholder="Search..." style="padding: 5px" />
        </div>
    </div>
</div>

<div class="tab-container mt-3 ms-3" style="width: 100%;">
    <div class="table-wrapper" style=" max-height:90vh; margin-right: 21px;">
        <table class="table mt-3" id="task-table">
            <thead class="sticky-header table-hover">
                <tr>
                    <th></th>
                    <th>Pickup Customer</th>
                    <th>Pickup Location</th>
                    <th>Delivery Customer</th>
                    <th>Delivery Location</th>
                    <th>Type</th>
                    <th>Crew Commander</th>
                    <th>Lead Vehicle</th>
                    <th>Chase Vehicle</th>
                    <th>Time</th>
                    <th>Status</th>
                    <th class="d-none">TaskId</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.taskDTOlsts != null && Model.taskDTOlsts.Any())
                {
                    @foreach (var typeGroup in Model.taskDTOlsts.GroupBy(t => t.OrderType))
                    {
                        <!-- Render the group header for TypeName -->
                        <tr class="order-header">
                            <td colspan="12" class="subheader-cell" style="background:#d9d9db !important;">
                                <div>@typeGroup.Key</div>
                            </td>
                        </tr>

                        <!-- Group by OrderNumber inside each TypeName group -->
                        @foreach (var orderGroup in typeGroup.GroupBy(t => t.OrderNumber))
                        {
                            <!-- Render the group header for OrderNumber -->
                            <tr class="order-subheader">
                                <td colspan="12" class="standing-order-no fw">@orderGroup.Key</td>
                            </tr>

                            <!-- Render each task in the OrderNumber group -->
                            @foreach (var tasklist in orderGroup)
                            {
                                <tr class="table-border">
                                    <td><input type="checkbox" class="row-checkbox"></td>
                                    <td>@tasklist.PickupCustomerName</td>
                                    <td>@tasklist.PickupLocation</td>

                                    <td>@tasklist.DeliveryCustomerName</td>
                                    <td>@tasklist.DeliveryLocation</td>
                                    <td>@tasklist.PickupType</td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td class="order-date">@tasklist.OrderDate.ToString("yyyy-MM-dd")</td>
                                    <td><span class="badge bg-secondary">Unassigned</span></td>
                                    <td class="d-none">@tasklist.TaskId</td>
                                    <td><a href="#"><i class="bi bi-pencil-square"></i></a></td>
                                </tr>
                            }
                        }
                    }
                }
                else
                {
                    <tr><td colspan="12">No tasks available.</td></tr>
                }

            </tbody>
        </table>
    </div>
</div>

@* **************************************Grouped data modal************************* *@

<!-- Modal -->
<div class="modal fade" id="Groupmodal" tabindex="-1" aria-labelledby="groupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="groupModalLabel" style="font-size:14px !important">Selected Orders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="ms-4 mt-4" style="font-size:14px !important">
                <span>Group Name : </span>
                <input type="text" id="groupNameInput" placeholder="Enter Group..." style="padding:0px 3px" />
            </div>
            <div class="modal-body" id="modal-content" style="overflow-x:auto">
                <table class="table table-bordered" style="font-size:12px !important">
                    <thead>
                        <tr>
                            <th>Pickup Customer</th>
                            <th>Delivery Customer</th>
                            <th>Delivery Location</th>

                            <th>Time</th>
                            <th>Type</th>
                            <th class="d-none">TaskID</th>
                        </tr>
                    </thead>
                    <tbody id="selectedOrdersTableBody">
                        <!-- Selected orders will be added here dynamically -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="font-size:14px !important">Close</button>
                <form method="post" asp-action="Index" asp-controller="Assignment" target="_blank">
                    @* target="_blank" *@
                    <button type="submit" id="saveGroupButton" class="btn btn-color" style="font-size:14px !important">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>



@* ************************************JavaSript for To Add the Selected Item in Modal popup*********** *@
<script>
    let firstSelectedPickupType = null; // Variable to store the first selected PickupType (ATM or CIT)

    document.querySelectorAll('.row-checkbox').forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
            const row = checkbox.closest('tr');
            const currentPickupType = row.cells[5].textContent.trim(); // Get PickupType of the current row

            // If this is the first selection, set the firstSelectedPickupType and allow selection
            if (!firstSelectedPickupType && checkbox.checked) {
                firstSelectedPickupType = currentPickupType;
                return; // Allow the first selection, no further checks needed
            }

            // If the user tries to select a different PickupType, show an alert and deselect the checkbox
            if (firstSelectedPickupType && firstSelectedPickupType !== currentPickupType) {
                alert(`You can only select tasks with the same Pickup Type (${firstSelectedPickupType}).`);
                checkbox.checked = false; // Deselect the checkbox to prevent invalid selection
            }

            // If all checkboxes are unchecked, reset the firstSelectedPickupType
            const anyChecked = Array.from(document.querySelectorAll('.row-checkbox:checked')).length > 0;
            if (!anyChecked) {
                firstSelectedPickupType = null; // Reset after all selections are cleared
            }
        });
    });

    // Logic for grouping and showing the selected tasks in the modal
    document.querySelector('.group-button').addEventListener('click', function () {
        $("[id*=groupPopup]").click(function () {
            $('#Groupmodal').modal('show');
        });

        const selectedOrdersTableBody = document.getElementById('selectedOrdersTableBody');
        selectedOrdersTableBody.innerHTML = ''; // Clear the table body

        // Gather selected data from the grouped table
        document.querySelectorAll('.row-checkbox:checked').forEach(function (checkbox) {
            const row = checkbox.closest('tr');

            // Collect the task details
            const PickupCustomer = row.cells[1].textContent.trim();
            const DeliveryCustomer = row.cells[2].textContent.trim();
            const DeliveryLocation = row.cells[4].textContent.trim();
            const time = row.cells[9].textContent.trim();
            const type = row.cells[5].textContent.trim();  // PickupType (ATM or CIT)
            const taskId = row.cells[11].textContent.trim();

            // Create a table row for the selected task
            const tableRow = document.createElement('tr');
            tableRow.innerHTML = `
                                    <td>${PickupCustomer}</td>
                                    <td>${DeliveryCustomer}</td>
                                    <td>${DeliveryLocation}</td>
                                    <td>${time}</td>
                                    <td>${type}</td>
                                    <td class="d-none">${taskId}</td>
                                `;
            selectedOrdersTableBody.appendChild(tableRow);
        });
    });
</script>



@* ************************************************************************************************ *@


@* ****************************JavaScript to get the Taskid and GroupName ************************ *@
<script src="~/js/config.js"></script>
<script>
    document.getElementById('saveGroupButton').addEventListener('click', function () {
        const groupName = document.getElementById('groupNameInput').value.trim();

        if (!groupName) {
            alert("Please enter a group name.");
            return;
        }
        const taskGroupDtos = [];

        // Collect selected rows data
        document.querySelectorAll('#selectedOrdersTableBody tr').forEach(function (row) {
            const taskId = row.cells[5].textContent.trim();

            // Create the DTO for each selected task
            taskGroupDtos.push({
                TaskId: parseInt(taskId),
                GroupName: groupName
            });
        });
        if (taskGroupDtos.length === 0) {
            alert("No tasks selected.");
            return;
        }
        console.log("taskGroupDtos", taskGroupDtos)


        // Send the data to the API
        fetch(`${API_BASE_URL}/api/TaskGroup/AddTaskGroup`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(taskGroupDtos)
        })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert(data.message);
                    // Optionally, close the modal
                    $('#Groupmodal').modal('hide');
                }

            })
            .catch(error => {
                console.error('Error:', error);
                alert("An error occurred while saving the group.");
            });
    });
</script>

@* ******************************Filter data based on Date*********************************** *@


<script>
    document.getElementById('filter-date').addEventListener('change', function () {
        // Get the selected date from the input (yyyy-MM-dd format)
        const selectedDate = this.value;


        // Call the API to fetch data filtered by date
        fetch(`${API_BASE_URL}/api/taskList?date=${selectedDate}`)
            .then(response => response.json())
            .then(data => {
                // Clear the current table content
                const tableBody = document.querySelector('#task-table tbody');
                tableBody.innerHTML = '';

                // Check if data is available
                if (data.result && data.result.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="12">No tasks available for the selected date.</td></tr>';
                    return;
                }

                // Group tasks by OrderType
                const tasksByOrderType = data.result.reduce((grouped, task) => {
                    if (!grouped[task.orderType]) {
                        grouped[task.orderType] = [];
                    }
                    grouped[task.orderType].push(task);
                    return grouped;
                }, {});

                // Iterate over each OrderType group
                for (const [orderType, tasks] of Object.entries(tasksByOrderType)) {
                    // Render the OrderType header
                    const orderTypeHeader = `
                                    <tr class="order-header">
                                        <td colspan="12" class="subheader-cell" style="background:#d9d9db !important;">
                                            <div>${orderType}</div>
                                        </td>
                                    </tr>`;
                    tableBody.innerHTML += orderTypeHeader;

                    // Group tasks by OrderNumber within each OrderType group
                    const tasksByOrderNumber = tasks.reduce((grouped, task) => {
                        if (!grouped[task.orderNumber]) {
                            grouped[task.orderNumber] = [];
                        }
                        grouped[task.orderNumber].push(task);
                        return grouped;
                    }, {});

                    // Iterate over each OrderNumber group
                    for (const [orderNumber, orderTasks] of Object.entries(tasksByOrderNumber)) {
                        // Render the OrderNumber header
                        const orderNumberHeader = `
                                        <tr class="order-subheader">
                                            <td colspan="12" class="standing-order-no fw">${orderNumber}</td>
                                        </tr>`;
                        tableBody.innerHTML += orderNumberHeader;

                        // Render each task within the OrderNumber group
                        orderTasks.forEach(task => {
                            const row = `
                                            <tr class="table-border">
                                                <td><input type="checkbox" class="row-checkbox"></td>
                                                <td>${task.pickupCustomerName || 'N/A'}</td>
                                                <td>${task.pickupLocation || 'N/A'}</td>
                                                <td>${task.deliveryCustomerName || 'N/A'}</td>
                                                <td>${task.deliveryLocation || 'N/A'}</td>
                                                <td>${task.pickupType || 'N/A'}</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td class="order-date">${new Date(task.orderDate).toLocaleDateString() || 'N/A'}</td>
                                                <td><span class="badge bg-secondary">${task.status || 'Unassigned'}</span></td>
                                                <td class="d-none">${task.taskId}</td>
                                                <td><a href="#"><i class="bi bi-pencil-square"></i></a></td>
                                            </tr>`;
                            tableBody.innerHTML += row;
                        });
                    }
                }
            })
            .catch(error => {
                console.error('Error fetching filtered data:', error);
            });

    });
</script>
