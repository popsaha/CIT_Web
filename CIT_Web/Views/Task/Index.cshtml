@model CIT_Web.Models.ViewModel.TaskCreateVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
<link href="~/css/datepicker.min.css" rel="stylesheet" />
<script src="~/js/bootstrap-multiselect.min.js"></script>
<script src="~/js/jquery.min.js"></script>

<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Flatpickr JS -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script type="text/javascript">
    $('document').ready(function () {


        $("#btnAddTsk").click(function () {
            $('#myModal').show();
        })

        $("#btnAddTaskInRows").click(function () {
            debugger
            //var Valid = true;
            var Valid = Validation()
            if (Valid == true) {
                $('#add-save-btn').prop('disabled', true);
                $("#btnAddmoreTask").click();
            }
        })
        $("#CustomerId").change(function () {
            debugger
            var CustomerId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/Task/GetBranchNameById",
                data: { "CustomerId": CustomerId },
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var Branchlst = '<option value="">Select</option>';
                    for (var i = 0; i < data.length; i++) {
                        Branchlst += '<option value="' + data[i].branchID + '">' + data[i].branchName + '</option>';
                    }
                    $("#BranchID").html(Branchlst);
                }
            })
        })

        $("#CustomerRecipiantId").change(function () {
            debugger
            var CustomerId = $(this).val();
            $.ajax({
                type: "GET",
                url: "/Task/GetBranchNameById",
                data: { "CustomerId": CustomerId },
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var Branchlst = '<option value="">Select</option>';
                    for (var i = 0; i < data.length; i++) {
                        Branchlst += '<option value="' + data[i].branchID + '">' + data[i].branchName + '</option>';
                    }
                    $("#CustomerRecipiantLocationId").html(Branchlst);
                }
            })
        })

        $("#choices-multiple-remove-button").change(function () {
            debugger
            var Days = $(this).val();
            $("#RepeatDaysName").val(Days);
        })

        $("#OrderNumber").change(function () {
            var OrderNumber = $(this).val();
            $.ajax({
                type: "GET",
                url: "/Task/GetAllOrderTask",
                data: { "OrderNumber": OrderNumber },
                dataType: "json",
                success: function (data) {
                    debugger
                    $("#orderType").val(data.orderTypeID);
                    $("#PickUpType").val(data.pickUpTypeId);
                    $("#priority").val(data.priorityId);
                    $("#orderCreateDate").val(data.orderCreateDate);
                    if (data.orderTypeID == 2) {
                        if (data.fullDayCheck == true) {
                            $("#fullDayCheck").prop('checked', true);
                            $("#NewVehicleRequired").attr('disabled', true);
                        }
                        $("#fullDay").show();
                        $("#repeatTaskSection").show();
                        $("#repeatsSection").show();
                        $("#repeatTask").prop("checked", true);
                        $("#repeatsMode").val(data.repeatId);
                        $("#EndOnDate").val(data.endOnDate);
                        $("#choices-multiple-remove-button").val(data.repeatDaysName);
                    }
                    else {
                        if (data.fullDayCheck == true) {
                            $("#fullDayCheck").prop('checked', false);
                            $("#NewVehicleRequired").attr('disabled', false);
                        }
                        $("#fullDay").hide();
                        $("#repeatTaskSection").hide();
                        $("#repeatsSection").hide();
                        $("#repeatTask").prop("checked", false);
                    }
                    $("#OrderRouteId").val(data.orderRouteId);
                    if (data.orderTypeID == 1) {
                        $("#btnAddTaskInRows").attr('disabled', true);
                    }
                    else {
                        $("#btnAddTaskInRows").attr('disabled', false);
                    }
                }
            })
        })

        $("#btnpopupclose").click(function () {
            Reset();
        });
        $("#btnClose").click(function () {
            Reset();
        });
    });

    function Validation() {
        debugger
        var IsValid = true;
        var OrderTypeID = $("#orderType").val();
        var PriorityId = $("#priority").val();
        var OrderId = $("#OrderId").val();
        var PickUpTypeId = $("#PickUpType").val();
        var Createorderdate = $("#orderCreateDate").val();
        var fullDayCheck = $("#fullDayCheck").prop("checked") ? 1 : 0;
        var CustomerId = $("#CustomerId").val();
        var BranchID = $("#BranchID").val();
        var VaultId = $("#VaultID").val();

        var CustomerRecipiantId = $("#CustomerRecipiantId").val();
        var CustomerRecipiantLocationId = $("#CustomerRecipiantLocationId").val();

        var OrderRouteId = $("#OrderRouteId").val();

        var MyRadio_repeatTask = $('input[name=repeatTask]:checked').val();

        var repeatsMode = $("#repeatsMode").val();
        var EndOnDate = $("#EndOnDate").val();

        var isVault = $('#isVault').prop('checked');
        var isVaultFinal = $('#isVaultFinal').prop('checked');

        var repeatdaysname = $("#RepeatDaysName").val();

        if (OrderTypeID == "0" || OrderTypeID == undefined) {
            $("#orderType").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#orderType").css("border", "1px solid #C3C1C1");
        }

        if (PriorityId == "0" || PriorityId == undefined) {
            $("#priority").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#priority").css("border", "1px solid #C3C1C1");
        }

        if (PickUpTypeId == "0" || PickUpTypeId == undefined) {
            $("#PickUpType").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#PickUpType").css("border", "1px solid #C3C1C1");
        }

        if (Createorderdate == "" || Createorderdate == undefined) {
            $("#orderCreateDate").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#orderCreateDate").css("border", "1px solid #C3C1C1");
        }

        if (OrderTypeID == "1" && (CustomerId == "0" || CustomerId == "" || CustomerId == undefined)) {
            $("#CustomerId").css("border", "1px solid red");
            IsValid = false;
        }

        // else {
        //     $("#CustomerId").css("border", "1px solid #C3C1C1");
        // }

        if (OrderTypeID == "1" && (BranchID == "0" || BranchID == "" || BranchID == null)) {
            $("#BranchID").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#BranchID").css("border", "1px solid #C3C1C1");
        // }

        //Add this code 03102024 open

        if (OrderTypeID == "2" && (fullDayCheck == 1) && (CustomerId == "0" || CustomerId == "" || CustomerId == undefined)) {
            $("#CustomerId").css("border", "1px solid red");
            IsValid = false;
        }

        if (OrderTypeID == "2" && (CustomerId != "0" || fullDayCheck == 1) && (BranchID == "0" || BranchID == "" || BranchID == null)) {
            $("#BranchID").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#BranchID").css("border", "1px solid #C3C1C1");
        // }
        //Add this code 03102024 close

        if (OrderTypeID == "1" && (CustomerRecipiantId == "0" || CustomerRecipiantId == "" || CustomerRecipiantId == undefined)) {
            $("#CustomerRecipiantId").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#CustomerRecipiantId").css("border", "1px solid #C3C1C1");
        // }

        if (OrderTypeID == "1" && (CustomerRecipiantLocationId == "0" || CustomerRecipiantLocationId == null)) {
            $("#CustomerRecipiantLocationId").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#CustomerRecipiantLocationId").css("border", "1px solid #C3C1C1");
        // }

        //Add this code 03102024 open

        if (OrderTypeID == "2" && (CustomerId != "0" || fullDayCheck == 1) && CustomerRecipiantId == "0") {
            $("#CustomerRecipiantId").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#CustomerRecipiantLocationId").css("border", "1px solid #C3C1C1");
        // }

        if (OrderTypeID == "2" && (CustomerId != "0" || fullDayCheck == 1 || CustomerRecipiantId != "0") && (CustomerRecipiantLocationId == "0" || CustomerRecipiantLocationId == "" || CustomerRecipiantLocationId == null)) {
            $("#CustomerRecipiantLocationId").css("border", "1px solid red");
            IsValid = false;
        }
        // else {
        //     $("#CustomerRecipiantLocationId").css("border", "1px solid #C3C1C1");
        // }
        //Add this code 03102024 close


        if (OrderRouteId == "0" || OrderRouteId == null) {
            $("#OrderRouteId").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#OrderRouteId").css("border", "1px solid #C3C1C1");
        }

        if (OrderTypeID == "2" && (MyRadio_repeatTask == undefined)) {
            $("#CustomerRecipiantLocationId").css("border", "1px solid red");
            IsValid = false;
        }

        if (OrderTypeID == "2" && MyRadio_repeatTask == "on" && repeatsMode == 0) {
            $("#repeatsMode").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#repeatsMode").css("border", "1px solid #C3C1C1");
        }

        if (OrderTypeID == "2" && MyRadio_repeatTask == "on" && (EndOnDate == 0 || EndOnDate == undefined)) {
            $("#EndOnDate").css("border", "1px solid red");
            IsValid = false;
        }
        else {
            $("#EndOnDate").css("border", "1px solid #C3C1C1");
        }
        // if (OrderTypeID == "2" && MyRadio_repeatTask == "on" && repeatsMode == 2 && (repeatdaysname == "" || repeatdaysname == undefined)) {
        //     $("#choices-multiple-remove-button").css("border", "1px solid red");
        //     IsValid = false;
        // }
        return IsValid;
    }

    function ResetRepeat() {
        debugger
        $("#fullDayCheck").prop('checked', false);
        $("#repeatsMode").val(0);
        $("#EndOnDate").val('');
    }
    function Reset() {
        debugger
        $("#OrderNumber").val("");
        $("#orderType").val(0);
        $("#priority").val(0);
        $("#OrderId").val("");
        $("#PickUpType").val(0);
        $("#orderCreateDate").val("");
        $("#CustomerId").val(0);
        $("#BranchID").val(0);
        //$("#VaultID").val();
        $("#CustomerRecipiantId").val(0);
        $("#CustomerRecipiantLocationId").val(0);
        $("#OrderRouteId").val(0);
        $("#repeatsMode").val(0);
        $("#EndOnDate").val("");
        $("#RepeatDaysName").val("");
        $("#fullDayCheck").prop('checked', false);
        $("#fullDay").hide();
        $("#repeatTaskSection").hide();
        $("#repeatsSection").hide();
        $("#repeatTask").prop("checked", false);
    }
</script>
<form enctype="multipart/form-data" asp-controller="Task" ,asp-action="Index" method="post">
    <input asp-for="RepeatDaysName" type="hidden" />
    <div class="modal fade new-task-dashboard-data" id="myModal" aria-labelledby="myNewTaskModalLabel" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="padding: 10px;">
                    <h5 class="modal-title" id="myModalLabel">New Order</h5>
                    <button type="button" id="btnpopupclose" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div id="modal-content" class="modal-body">
                    <div id="orderMessage" style="display: none;">
                        <p style="background: #e29d1f; padding: 4px 10px; font-weight: 300; font-size: 13px; border-radius:4px;">  <i class="bi bi-info-circle-fill"></i> Multiple pickup and delivery task  can be liked by the same Order ID</p>
                    </div>

                    <div class="row align-items-center g-0">
                        <!-- OrderType Dropdown -->
                        <div class="col-md-4 col-sm-12">

                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-file-text-fill"></i></div>
                                <select asp-for="OrderTypeID" class="form-select small-input" id="orderType"
                                        asp-items="@(new SelectList(@Model.OrderTypelist,"OrderTypeID","TypeName"))">
                                </select>
                            </div>
                        </div>

                        <!-- Priority Dropdown -->
                        <div class="col-md-4 col-sm-12">
                            <div class="input-group">
                                <div class="input-group-text">Priority</div>
                                <select asp-for="PriorityId" class="form-select small-input" id="priority"
                                        asp-items="@(new SelectList(@Model.PriorityMasterlist,"PriorityId","PriorityName"))">
                                </select>
                            </div>
                        </div>
                        <!-- Order ID Input -->
                        <div class="col-md-4 col-sm-12">
                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-credit-card-2-front-fill"></i></div>
                                <input asp-for="OrderNumber" class="form-control small-input" placeholder="Enter Order Number" />
                                @* <input type="number" placeholder="Enter Order Id" class="form-control small-input" id="OrderId" name="OrderId" min="1" max="100"> *@
                            </div>
                        </div>
                    </div>

                    <div class="row align-items-center g-0">
                        <div class="col-md-6 col-sm-12 mb-2 mt-2">
                            <div class="input-group">
                                <div class="input-group-text"><i class="bi bi-clipboard-fill"></i></div>
                                <select asp-for="PickUpTypeId" class="form-select small-input" id="PickUpType"
                                        asp-items="@(new SelectList(Model.Picktypemasterlst,"PickUpTypeId","PickUpTypeName"))">
                                </select>
                            </div>
                        </div>

                        <div class="col-md-6 col-sm-12">
                            @*    <div class="input-group">
                            <input asp-for="OrderCreateDate" type="text" id="orderCreateDate" class="form-control small-input" placeholder="Choose date">
                            </div> *@


                            <div class="input-group">
                                <input asp-for="OrderCreateDate" type="text" id="orderCreateDate" class="form-control" placeholder="Select order date">
                                <span class="input-group-text"><i class="bi bi-calendar3"></i></span>
                            </div>


                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-6 col-sm-12 mt-2 mb-2">
                            <div class="form-check  ms-1 mt-lg-0 mt-2" id="fullDay">
                                <input asp-for="fullDayCheck" class="form-check-input" type="checkbox">
                                <label class="form-check-label" for="fullDayCheck">
                                    Full day occupancy
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="row align-items-center mt-3 g-0">
                        <h6>Sender / Pickup Location</h6>

                        <div class="row g-0 mx-auto">
                            <div class="col-md-6 col-sm-12">
                                <div class="input-group">
                                    <div class="input-group-text ">
                                        <i class="bi bi-person-fill"></i> <!-- Replace with an appropriate icon for "Requester" -->
                                    </div>
                                    <select asp-for="CustomerId" class="form-select small-input"
                                            asp-items="@(new SelectList(Model.customerslist,"CustomerId","CustomerName"))">
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12 ">
                                <div class="input-group ">
                                    <div class="input-group-text ">
                                        <i class="bi bi-geo-alt-fill"></i> <!-- Replace with an appropriate icon for "Location" -->
                                    </div>
                                    <select asp-for="BranchID" class="form-select small-input">
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row align-items-center g-0 mt-3">
                            <h6>Recipient / Destination Location</h6>
                            <div class="col-3">
                                <div class="form-check  ms-1">
                                    <input asp-for="isVault" type="checkbox" class="form-check-input">
                                    <label class="form-check-label" for="isVault">IsVault</label>
                                </div>
                            </div>
                            <div class="col-md-5 col-sm-12  " id="vaultLocationContainer">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <i class="bi bi-geo-alt-fill"></i> <!-- Replace with an appropriate icon for "Location" -->
                                    </div>
                                    @* <select asp-for="VaultID" class="form-select small-input"
                                    asp-items="@(new SelectList(Model.vaultLovationMasters,"VaultID","VaultName"))">
                                    </select> *@
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-check  ms-1" id="isVaultFinalContainer">
                                    <input asp-for="isVaultFinal" type="checkbox" class="form-check-input" name="isVaultFinal">
                                    <label class="form-check-label" for="isVaultFinal">isVault - final destination</label>
                                </div>
                            </div>
                            <div class="row g-0 mt-3 mb-3 ">
                                <!-- Recipient's Name Dropdown -->
                                <div class="col-md-6 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <i class="bi bi-person-fill"></i> <!-- Replace with an appropriate icon for "Recipient" -->
                                        </div>
                                        <select asp-for="CustomerRecipiantId" class="form-select small-input"
                                                asp-items="@(new SelectList(Model.customerslist,"CustomerId","CustomerName"))">
                                        </select>
                                    </div>
                                </div>

                                <!-- Delivery Location Dropdown -->

                                <div class="col-md-6 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <i class="bi bi-geo-fill"></i> <!-- Replace with an appropriate icon for "Delivery Location" -->
                                        </div>
                                        <select asp-for="CustomerRecipiantLocationId" class="form-select small-input">
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- Assign To Section -->
                            <div class="row align-items-center  g-0  mb-2">
                                <h6 class="mb-2">Assign To</h6>

                                <div class="col-md-4 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            Route
                                        </div>
                                        <select asp-for="OrderRouteId" class="form-select small-input"
                                                asp-items="@(new SelectList(Model.Orderrouteslst,"OrderRouteId","RouteName"))">
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-4 col-sm-12">
                                    <div class="input-group">
                                        <div class="input-group-text">No Of Vehicle</div>
                                        <input class="form-control small-input" value="1" placeholder="Enter No of Vehicle" />

                                    </div>
                                </div>
                                <div class="col-md-4 col-sm-12 ">
                                    <div class="form-check ms-lg-5 ms-1 mt-lg-0 mt-2" id="newVehicle">
                                        <input asp-for="NewVehicleRequired" class="form-check-input" type="checkbox" value="" id="NewVehicleRequired">
                                        <label class="form-check-label" for="newVehicleCheck">
                                            New Vehicle Required
                                        </label>
                                    </div>
                                </div>

                            </div>
                            <div id="repeatTaskSection" class="mt-0 mb-2" style="display:none;">

                                <!-- Repeat This Task Toggle -->
                                <div class="form-check form-switch mb-2 fw-bold">
                                    <input class="form-check-input" type="checkbox" id="repeatTask" name="repeatTask">
                                    <label class="form-check-label" for="repeatTask">Repeat this task</label>
                                </div>

                                <!-- Repeats Section (Initially Hidden) -->
                                <div class="row align-items-center g-0 repeats-section" id="repeatsSection">
                                    <!-- Repeats Dropdown -->
                                    <div class="col-md-6 col-sm-12">
                                        <div class="input-group w-100">
                                            <div class="input-group-text">Repeats</div>
                                            <select asp-for="RepeatId" class="form-select small-input" id="repeatsMode"
                                                    asp-items="@(new SelectList(Model.repeatsaskmasterslist, "RepeatId", "RepeatName"))">
                                            </select>
                                        </div>
                                    </div>
                                    <!-- Ends On Calendar -->
                                    <div class="col-md-6 col-sm-12">
                                        <div class="input-group w-100">
                                            <div class="input-group-text">Ends on</div>
                                            <input asp-for="EndOnDate" type="text" class="form-control small-input" placeholder="Select end date">
                                            <span class="input-group-text"><i class="bi bi-calendar3"></i></span>

                                        </div>
                                    </div>
                                    <!-- Repeats On Multi-select Dropdown -->
                                    <div class="col-md-12 col-sm-12 mb-3">
                                        <div class="input-group w-100">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text repeats-on-text">Repeats On</span>
                                            </div>
                                            @* <select asp-for="RepeatDaysName" class="form-select small-input" multiple="multiple"
                                            asp-items="@(new SelectList(Model.repeatsInDaysMasterslist, "RepeatDaysName", "RepeatInDay"))">
                                            </select> *@
                                            <select id="choices-multiple-remove-button" class="form-select small-input" name="options" multiple>
                                                <option value="Sunday">Sunday</option>
                                                <option value="Monday">Monday</option>
                                                <option value="Tuesday">Tuesday</option>
                                                <option value="Wednesday">Wednesday</option>
                                                <option value="Thursday">Thursday</option>
                                                <option value="Friday">Friday</option>
                                                <option value="Saturday">Saturday</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>


                    <div class="modal-footer d-flex justify-content-between " style="font-size:12px !important; padding:0px !important">
                        <button type="button" id="btnClose" style="font-size:12px !important;" class="btn btn-secondary mt-3" data-bs-dismiss="modal"><i class="bi bi-x-circle-fill"></i> Close</button>
                        <div>

                            <input type="button" style="font-size:12px !important; color: #032b56; border-color: #032b56; bi bi-file-earmark-pdf !important;"
                                   class="btn btn-outline mt-3" value="Save & Add Another" id="btnsave">

                            <input type="submit" class="btn btn-color" id="btnAddmoreTask" style="display:none" />
                            @* <button type="button" style="font-size:12px !important;" class="btn btn-color" data-bs-dismiss="modal" id="btnAddTaskInRows" style="background:#132553 !important;"><i class="bi bi-file-earmark-pdf"></i> Save & Add more location to this Task</button> *@
                            <input type="button" style="font-size:12px !important;" class="btn btn-color mt-3" value="Save and Close" id="btnAddTaskInRows" />
                            @* <i class="bi bi-file-earmark-lock-fill"></i> Save and close *@
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</form>

@* ************************************************************************************************************ *@


<div class="tab-container-task-header mt-3 ms-3" style="width: 100%;">
    <div class="group-data-action-container d-flex justify-content-between">
        <div class="d-flex align-items-center">

            <button class="btn btn-color me-4 " data-bs-toggle="modal" data-bs-target="#vehicleAssignModal"><i class="bi bi-person-check-fill"></i></button>


            <a class="me-3" href="#"><i class="bi bi-pencil-square"></i></a>
            <a class="me-3" href="#"><i class="bi bi-trash-fill"></i></a>
            <a class="me-3" href="#"><i class="bi bi-arrow-down-circle-fill"></i></a>
            <a class="me-3" href="#"><i class="bi bi-gear-fill"></i></a>
            <button class="btn btn-color group-button" data-bs-toggle="Groupmodal" data-bs-target="#groupModal" id="groupPopup">Task Grouping</button>
            <div class="dropdown-new-task  me-2 ms-3" style="width:100px  !important">
                <button type="button" class="btn btn-outline-secondary btn-color" data-bs-toggle="modal" id="btnAddTsk" data-bs-target="#myNewTaskModal">
                    <i class="bi bi-plus"></i> New Order
                </button>
            </div>
        </div>
        <div class="d-flex" style="margin-right: 21px;">
            <div>
                <input type="date" id="filter-date" style="padding: 5px; margin-right: 10px;" />
            </div>
            <input type="text" placeholder="Search..." style="padding: 5px" />
        </div>
    </div>
</div>

<div class="tab-container mt-3 ms-3" style="width: 100%;">
    <div class="table-wrapper" style=" max-height:90vh; margin-right: 21px;">
        <table class="table mt-3" id="task-table">
            <thead class="sticky-header table-hover">
                <tr>
                    <th></th>
                    <th>Pickup Customer</th>
                    <th>Pickup Location</th>
                    <th>Delivery Customer</th>
                    <th>Delivery Location</th>
                    <th>Type</th>
                    <th>Crew Commander</th>
                    <th>Lead Vehicle</th>
                    <th>Chase Vehicle</th>
                    <th>Time</th>
                    <th>Status</th>
                    <th class="d-none">TaskId</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.taskDTOlsts != null && Model.taskDTOlsts.Any())
                {
                    @foreach (var typeGroup in Model.taskDTOlsts.GroupBy(t => t.OrderType))
                    {
                        <!-- Render the group header for TypeName -->
                        <tr class="order-header">
                            <td colspan="12" class="subheader-cell" style="background:#d9d9db !important;">
                                <div>@typeGroup.Key</div>
                            </td>
                        </tr>

                        <!-- Group by OrderNumber inside each TypeName group -->
                        @foreach (var orderGroup in typeGroup.GroupBy(t => t.OrderNumber))
                        {
                            <!-- Render the group header for OrderNumber -->
                            <tr class="order-subheader">
                                <td colspan="12" class="standing-order-no fw">@orderGroup.Key</td>
                            </tr>

                            <!-- Render each task in the OrderNumber group -->
                            @foreach (var tasklist in orderGroup)
                            {
                                <tr class="table-border">
                                    <td><input type="checkbox" class="row-checkbox"></td>
                                    <td>@tasklist.PickupCustomerName</td>
                                    <td>@tasklist.PickupLocation</td>

                                    <td>@tasklist.DeliveryCustomerName</td>
                                    <td>@tasklist.DeliveryLocation</td>
                                    <td>@tasklist.PickupType</td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td class="order-date">@tasklist.OrderDate.ToString("yyyy-MM-dd")</td>
                                    <td><span class="badge bg-secondary">Unassigned</span></td>
                                    <td class="d-none">@tasklist.TaskId</td>
                                    <td><a href="#"><i class="bi bi-pencil-square"></i></a></td>
                                </tr>
                            }
                        }
                    }
                }
                else
                {
                    <tr><td colspan="12">No tasks available.</td></tr>
                }

            </tbody>
        </table>
    </div>
</div>

@* **************************************Grouped data modal************************* *@

<!-- Modal -->
<div class="modal fade" id="Groupmodal" tabindex="-1" aria-labelledby="groupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="groupModalLabel" style="font-size:14px !important">Selected Orders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="ms-4 mt-4" style="font-size:14px !important">
                <span>Route Name : </span>
                <input type="text" id="routeNameInput" placeholder="Enter Route..." style="padding:0px 3px" />
            </div>
            <div class="modal-body" id="modal-content" style="overflow-x:auto">
                <table class="table table-bordered" style="font-size:12px !important">
                    <thead>
                        <tr>
                            <th>Pickup Customer</th>
                            <th>Delivery Customer</th>
                            <th>Delivery Location</th>

                            <th>Time</th>
                            <th>Type</th>
                            <th class="d-none">TaskID</th>
                        </tr>
                    </thead>
                    <tbody id="selectedOrdersTableBody">
                        <!-- Selected orders will be added here dynamically -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="font-size:14px !important">Close</button>
                <form method="post" asp-action="Index" asp-controller="Assignment" target="_blank">
                    @* target="_blank" *@
                    <button type="submit" id="saveGroupButton" class="btn btn-color" style="font-size:14px !important">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

@* ******************************************************************************************** *@


@* ************************************Vehicle Assignment Model ********************************* *@

<div class="modal fade custom-modal-size" id="vehicleAssignModal" tabindex="-1" aria-labelledby="assignModalLabel" aria-hidden="true">
    <div class="modal-dialog ">
        <!-- Custom size class applied -->
        <div class="modal-content" style="width:430px">
            @*  <div class="modal-header">

            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div> *@
            <div class="modal-body">
                <!-- Nav tabs -->
                <ul class="nav nav-tabs " id="assignTabs" role="tablist">
                    <li class="nav-item " role="presentation">
                        <button class="nav-link active" id="leadVehicle-tab" data-bs-toggle="tab" data-bs-target="#leadVehicleDriver-tab" type="button" role="tab" aria-controls="lead" aria-selected="false">
                            <i class="bi bi-car-front-fill "></i>
                            <span class="ms-1 ">
                                Lead Vehicle
                            </span>
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="chaseVehicle-tab" data-bs-toggle="tab" data-bs-target="#chaseVehicleDriver-tab" type="button" role="tab" aria-controls="Chase" aria-selected="false">
                            <i class="bi bi-truck "></i> <span class="ms-1 ">Chase vehicle </span>
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="crew-tab" data-bs-toggle="tab" data-bs-target="#crewCommandor-tab" type="button" role="tab" aria-controls="crewCommandor" aria-selected="false">  <i class="bi bi-person-badge-fill "></i> <span class="ms-1 ">Crew Commander </span> </button>
                    </li>

                </ul>

                <!-- Tab content -->
                <div class="tab-content mt-3" style="height: 200px;">
                    <!-- Lead Vehicle Tab -->
                    <div class="tab-pane fade show active" id="leadVehicleDriver-tab" role="tabpanel" aria-labelledby="leadVehicle-tab">
                        <h5>Select a Lead Vehicle driver to assign tasks:</h5>
                        <div class="p-3">
                            @if (Model.vehicledtolst != null && Model.vehicledtolst.Any())
                            {
                                @foreach (var vehicle in Model.vehicledtolst.Where(v => v.VehicleType == "Lead"))
                                {
                                    <div class="form-check d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center gap-2">
                                            <input class="form-check-input lead-vehicle-checkbox" type="checkbox" name="leadVehicleDriver" id="leadVehicleDriver_@vehicle.VehicleID" value="@vehicle.VehicleID">
                                            <i class="bi bi-car-front-fill" style="font-size: 25px;"></i>
                                            <label class="form-check-label" for="leadVehicleDriver_@vehicle.VehicleID">
                                                @vehicle.RegistrationNo
                                            </label>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No vehicles available</p>
                            }
                        </div>
                    </div>

                    <!-- Chase Vehicle Tab -->
                    <div class="tab-pane fade" id="chaseVehicleDriver-tab" role="tabpanel" aria-labelledby="chaseVehicle-tab">
                        <h5>Select a Chase Vehicle driver to assign tasks:</h5>
                        <div class="p-3">
                            @if (Model.vehicledtolst != null && Model.vehicledtolst.Any())
                            {
                                @foreach (var vehicle in Model.vehicledtolst.Where(v => v.VehicleType == "Chase"))
                                {
                                    <div class="form-check d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center gap-2">
                                            <input class="form-check-input chase-vehicle-checkbox" type="checkbox" name="chaseVehicleDriver" id="chaseVehicleDriver_@vehicle.VehicleID" value="@vehicle.VehicleID">
                                            <i class="bi bi-truck" style="font-size: 25px;"></i>
                                            <label class="form-check-label" for="chaseVehicleDriver_@vehicle.VehicleID">
                                                @vehicle.RegistrationNo
                                            </label>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No vehicles available</p>
                            }
                        </div>
                    </div>

                    <!-- Crew Commander Tab -->
                    <div class="tab-pane fade assignment-container" id="crewCommandor-tab" role="tabpanel" aria-labelledby="crew-tab">
                        <h5>Select a  Crew Commander to assign tasks:</h5>
                        <div class="p-3">
                            @if (Model.crews != null && Model.crews.Any())
                            {
                                @foreach (var crewCommander in Model.crews)
                                {
                                    <div class="form-check d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center gap-2">
                                            <input class="form-check-input crew-commander-checkbox" type="checkbox" name="crewCommander" id="crewCommander_@crewCommander.CrewCommanderId" value="@crewCommander.CrewCommanderId">
                                            <img src="~/assets/Images/userlogo.jpg" class="rounded-circle" style="width: 30px;" alt="Avatar" />
                                            <label class="form-check-label" for="crewCommander_@crewCommander.CrewCommanderId">
                                                @crewCommander.Name
                                            </label>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No crew commanders available</p>
                            }
                        </div>
                    </div>

                </div>

                <div class="modal-footer d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-color" id="">Assign</button>
                </div>
            </div>
        </div>
    </div>


</div>


@* *********************************************************************************************** *@



@* ************************************JavaSript for To Add the Selected Item in Modal popup*********** *@
<script>
    let firstSelectedPickupType = null; // Variable to store the first selected PickupType (ATM or CIT)

    document.querySelectorAll('.row-checkbox').forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
            const row = checkbox.closest('tr');
            const currentPickupType = row.cells[5].textContent.trim(); // Get PickupType of the current row

            // If this is the first selection, set the firstSelectedPickupType and allow selection
            if (!firstSelectedPickupType && checkbox.checked) {
                firstSelectedPickupType = currentPickupType;
                return; // Allow the first selection, no further checks needed
            }

            // If the user tries to select a different PickupType, show an alert and deselect the checkbox
            if (firstSelectedPickupType && firstSelectedPickupType !== currentPickupType) {
                alert(`You can only select tasks with the same Pickup Type (${firstSelectedPickupType}).`);
                checkbox.checked = false; // Deselect the checkbox to prevent invalid selection
            }

            // If all checkboxes are unchecked, reset the firstSelectedPickupType
            const anyChecked = Array.from(document.querySelectorAll('.row-checkbox:checked')).length > 0;
            if (!anyChecked) {
                firstSelectedPickupType = null; // Reset after all selections are cleared
            }
        });
    });

    // Logic for grouping and showing the selected tasks in the modal
    document.querySelector('.group-button').addEventListener('click', function () {
        $("[id*=groupPopup]").click(function () {
            $('#Groupmodal').modal('show');
        });

        const selectedOrdersTableBody = document.getElementById('selectedOrdersTableBody');
        selectedOrdersTableBody.innerHTML = ''; // Clear the table body

        // Gather selected data from the grouped table
        document.querySelectorAll('.row-checkbox:checked').forEach(function (checkbox) {
            const row = checkbox.closest('tr');

            // Collect the task details
            const PickupCustomer = row.cells[1].textContent.trim();
            const DeliveryCustomer = row.cells[2].textContent.trim();
            const DeliveryLocation = row.cells[4].textContent.trim();
            const time = row.cells[9].textContent.trim();
            const type = row.cells[5].textContent.trim();  // PickupType (ATM or CIT)
            const taskId = row.cells[11].textContent.trim();

            // Create a table row for the selected task
            const tableRow = document.createElement('tr');
            tableRow.innerHTML = `
                                                                                                                                                                                                                        <td>${PickupCustomer}</td>
                                                                                                                                                                                                                        <td>${DeliveryCustomer}</td>
                                                                                                                                                                                                                        <td>${DeliveryLocation}</td>
                                                                                                                                                                                                                        <td>${time}</td>
                                                                                                                                                                                                                        <td>${type}</td>
                                                                                                                                                                                                                        <td class="d-none">${taskId}</td>
                                                                                                                                                                                                                    `;
            selectedOrdersTableBody.appendChild(tableRow);
        });
    });
</script>



@* ************************************************************************************************ *@


@* ****************************JavaScript to get the Taskid and GroupName ************************ *@
<script src="~/js/config.js"></script>
<script>
    document.getElementById('saveGroupButton').addEventListener('click', function () {
        const routeName = document.getElementById('routeNameInput').value.trim(); // Getting the route name

        if (!routeName) {
            alert("Please enter a route name.");
            return;
        }

        const orderIds = [];

        // Collect selected rows data (assuming the order ID is in the 6th column of the table)
        document.querySelectorAll('#selectedOrdersTableBody tr').forEach(function (row) {
            const orderId = row.cells[5].textContent.trim(); // Extracting the order ID
            orderIds.push(parseInt(orderId)); // Adding it to the orderIds array
        });

        if (orderIds.length === 0) {
            alert("No orders selected.");
            return;
        }

        // Prepare the data in the required format
        const requestData = {
            orderIds: orderIds, // Array of order IDs
            routeName: routeName // Route name
        };

        console.log("requestData", requestData); // For debugging

        // Send the data to the API
        fetch(`${API_BASE_URL}/api/Order/updateRoute`, { // Update with the actual API endpoint
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData) // Send the data in JSON format
        })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert(data.message);
                    // Optionally, close the modal
                    $('#Groupmodal').modal('hide');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("An error occurred while saving the route.");
            });
    });
</script>


@* ******************************Filter data based on Date*********************************** *@

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let selectedPickupType = null;

        // Get today's date in yyyy-MM-dd format
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('filter-date').value = today;

        // Call the API to fetch data for today's date
        fetchTasksByDate(today);

        document.getElementById('filter-date').addEventListener('change', function () {
            const selectedDate = this.value;
            fetchTasksByDate(selectedDate);
        });

        function fetchTasksByDate(date) {
            fetch(`${API_BASE_URL}/api/taskList?date=${date}`)
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.querySelector('#task-table tbody');
                    tableBody.innerHTML = ''; // Clear the table content

                    if (data.result && data.result.length === 0) {
                        tableBody.innerHTML = '<tr><td colspan="12">No tasks available for the selected date.</td></tr>';
                        return;
                    }

                    const tasksByOrderType = data.result.reduce((grouped, task) => {
                        if (!grouped[task.orderType]) grouped[task.orderType] = [];
                        grouped[task.orderType].push(task);
                        return grouped;
                    }, {});

                    for (const [orderType, tasks] of Object.entries(tasksByOrderType)) {
                        const orderTypeHeader = `
                                                                                                                                                                                                        <tr class="order-header">
                                                                                                                                                                                                            <td colspan="12" class="subheader-cell" style="background:#d9d9db !important;">
                                                                                                                                                                                                                <div>${orderType}</div>
                                                                                                                                                                                                            </td>
                                                                                                                                                                                                        </tr>`;
                        tableBody.innerHTML += orderTypeHeader;

                        const tasksByOrderNumber = tasks.reduce((grouped, task) => {
                            if (!grouped[task.orderNumber]) grouped[task.orderNumber] = [];
                            grouped[task.orderNumber].push(task);
                            return grouped;
                        }, {});

                        for (const [orderNumber, orderTasks] of Object.entries(tasksByOrderNumber)) {
                            const orderNumberHeader = `
                                                                                                                                                                                                            <tr class="order-subheader">
                                                                                                                                                                                                                <td colspan="12" class="standing-order-no fw">${orderNumber}</td>
                                                                                                                                                                                                            </tr>`;
                            tableBody.innerHTML += orderNumberHeader;

                            orderTasks.forEach(task => {
                                const row = `
                                                                                                                                                                                                                <tr class="table-border">
                                                                                                                                                                                                                    <td><input type="checkbox" class="row-checkbox" data-pickup-type="${task.pickupType}"></td>
                                                                                                                                                                                                                    <td>${task.pickupCustomerName || 'N/A'}</td>
                                                                                                                                                                                                                    <td>${task.pickupLocation || 'N/A'}</td>
                                                                                                                                                                                                                    <td>${task.deliveryCustomerName || 'N/A'}</td>
                                                                                                                                                                                                                    <td>${task.deliveryLocation || 'N/A'}</td>
                                                                                                                                                                                                                    <td>${task.pickupType || 'N/A'}</td>
                                                                                                                                                                                                                    <td></td><td></td><td></td>
                                                                                                                                                                                                                    <td class="order-date">${new Date(task.orderDate).toLocaleDateString() || 'N/A'}</td>
                                                                                                                                                                                                                    <td><span class="badge bg-secondary">${task.status || 'Unassigned'}</span></td>
                                                                                                                                                                                                                    <td class="d-none">${task.taskId}</td>
                                                                                                                                                                                                                    <td><a href="#"><i class="bi bi-pencil-square"></i></a></td>
                                                                                                                                                                                                                </tr>`;
                                tableBody.innerHTML += row;
                            });
                        }
                    }

                    // Add event listeners for checkbox selection
                    const checkboxes = document.querySelectorAll('.row-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', function () {
                            const currentPickupType = this.dataset.pickupType;

                            // If no pickup type is selected yet, set it to the first selected checkbox's type
                            if (selectedPickupType === null && this.checked) {
                                selectedPickupType = currentPickupType;
                            }

                            // Allow selection only if the types match or it's a deselection
                            if (this.checked && currentPickupType !== selectedPickupType) {
                                alert(`You can only select tasks with the same Pickup Type: ${selectedPickupType}`);
                                this.checked = false;
                            } else if (!this.checked) {
                                // If all checkboxes are unchecked, reset the selection
                                const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
                                if (!anyChecked) selectedPickupType = null;
                            }
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }
    });

</script>


@* *****************************************Vehicle Assignment in Task List ******************* *@

@* ********************************************************************************************** *@

@* **************************Full day occupancy check then desable the New wehicle required *** *@

<script>
    document.getElementById('fullDayCheck').addEventListener('change', function () {
        var newVehicleCheckbox = document.getElementById('NewVehicleRequired');

        if (this.checked) {
            newVehicleCheckbox.disabled = true; // Disable the "New Vehicle Required" checkbox
        } else {
            newVehicleCheckbox.disabled = false; // Enable the "New Vehicle Required" checkbox
        }
        $("#CustomerId").css("border", "1px solid #C3C1C1");
        $("#BranchID").css("border", "1px solid #C3C1C1");
        $("#CustomerRecipiantId").css("border", "1px solid #C3C1C1");
        $("#CustomerRecipiantLocationId").css("border", "1px solid #C3C1C1");
    });

    document.getElementById('NewVehicleRequired').addEventListener('change', function () {
        var vehicleInput = document.querySelector('input[placeholder="Enter No of Vehicle"]');
        var currentValue = parseInt(vehicleInput.value) || 1; // Default to 1 if empty or invalid value

        if (this.checked) {
            vehicleInput.value = currentValue + 1; // Increment value by 1 when checked
        } else {
            if (currentValue > 1) {
                vehicleInput.value = currentValue - 1; // Decrement value by 1, but don't go below 1
            }
        }
    });


</script>

@* ******************************************************************************************* *@
@* **************If OrderType will be Standing then show the repeat this task show ***** *******@

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var orderTypeDropdown = document.getElementById('orderType');
        var repeatTaskSection = document.getElementById('repeatTaskSection');
        var fullDayOccupancy = document.getElementById('fullDay');

        var repeatTaskCheckbox = document.getElementById('repeatTask');
        var repeatsSection = document.getElementById('repeatsSection');

        // Function to toggle visibility based on the selected OrderType
        function toggleRepeatTaskSection() {
            var selectedOrderType = orderTypeDropdown.options[orderTypeDropdown.selectedIndex].text;
            if (selectedOrderType === 'Standing') {
                repeatTaskSection.style.display = 'block';
                fullDayOccupancy.style.display = 'block';
                repeatTaskCheckbox.checked = true;
                repeatsSection.style.display = 'flex';
                $("#CustomerId").css("border", "1px solid #C3C1C1");
                $("#BranchID").css("border", "1px solid #C3C1C1");
                $("#CustomerRecipiantId").css("border", "1px solid #C3C1C1");
                $("#CustomerRecipiantLocationId").css("border", "1px solid #C3C1C1");
            } else {
                repeatTaskSection.style.display = 'none';
                fullDayOccupancy.style.display = 'none';
            }
            //Reset();
        }

        // Trigger the function when the page loads (in case a value is preselected)
        toggleRepeatTaskSection();

        // Attach the event listener to the dropdown
        orderTypeDropdown.addEventListener('change', toggleRepeatTaskSection);
    });
</script>

@* ******************************************************************************************* *@
<script>
    document.addEventListener('DOMContentLoaded', function () {
        flatpickr("#orderCreateDate", {
            dateFormat: "d-m-y",  // Customize the date format
            allowInput: true      // Optional: Allow manual input
        });

        flatpickr("#EndOnDate", {
            dateFormat: "d-m-y",  // Customize the date format
            allowInput: true      // Optional: Allow manual input
        });
    });
</script>

